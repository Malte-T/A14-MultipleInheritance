-- @path Mehrfachvererbung=/Mehrfachvererbung2Einfachvererbung/Mehrfachvererbung.ecore
-- @path Einfachvererbung=/Mehrfachvererbung2Einfachvererbung/Einfachvererbung.ecore

module Mehrfachvererbung2Einfachvererbung;

create OUT: Einfachvererbung from IN: Mehrfachvererbung;

helper context Mehrfachvererbung!Class def: hasInheritances(): Bag(Mehrfachvererbung!Generalisation) = 
	Mehrfachvererbung!Generalisation.allInstances()->select(g | g.specific = self)->asBag();

rule Operations {
	from
		opIn : Mehrfachvererbung!Operation
	to
		opOut : Einfachvererbung!Operation(
			name <- opIn.name,
			return <- opIn.return
		)
	do {
		for(i in opIn.formalParameters) {	
		opOut.formalParameters <- opOut.formalParameters.including(thisModule.formalParametersGenerator(i));
		}
	}
}

rule formalParametersGenerator(fpIn : Mehrfachvererbung!Parameter) {
	to 
		fpOut : Einfachvererbung!Parameter(
			name <- fpIn.name,
			type <- fpIn.type
		)
	do {
		fpOut;
	}
}

rule Primitives {
	from
		primIn : Mehrfachvererbung!Primitive
	to
		primOut : Einfachvererbung!Primitive(
			name <- primIn.name
		)
}

rule HandleSimpleClasses {
	from
		cIn : Mehrfachvererbung!Class(
			cIn.hasInheritances().size() <= 1
		)
	to
		cOut : Einfachvererbung!Class(
			name <- cIn.name,
			operations <- cIn.operations
		)
}

rule HandleMehrfachvererbung {
	from
		cIn : Mehrfachvererbung!Class(
			cIn.hasInheritances().size() > 1
		)
	to
		cOut : Einfachvererbung!Class(
			name <- cIn.name
		)
	do {
		for (g in cIn.hasInheritances()) {
			thisModule.CreateAssociation(cOut, g);
			for (op in g.general.operations) {
				cOut.operations <- cOut.operations.including(thisModule.generateClassOperations(op));
			}
		}
	}
}

rule generateClassOperations(opIn : Mehrfachvererbung!Operation) {
	to
		opOut : Einfachvererbung!Operation(
			return <- opIn.return,
			name <- opIn.name
		)
	do {
		for(i in opIn.formalParameters) {
			opOut.formalParameters <- opOut.formalParameters.including(thisModule.formalParametersGenerator(i));	
		}
		opOut;
	}
}

rule CreateAssociation(cOut : Einfachvererbung!Class, g : Mehrfachvererbung!Generalisation) {
	to
		asc : Einfachvererbung!Association(
			name <- 'the' + g.general.name,
			ownerType <- cOut,
			targetType <- g.general
		)
}
	
